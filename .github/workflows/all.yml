name: Python package

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "README.md"
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.cibw_build }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            cibw_build: cp311-manylinux_x86_64
            cibw_archs: x86_64
          - os: ubuntu-22.04
            cibw_build: cp312-manylinux_x86_64
            cibw_archs: x86_64
          - os: ubuntu-22.04
            cibw_build: cp313-manylinux_x86_64
            cibw_archs: x86_64
          
          # macOS x86_64 builds
          - os: macos-13
            cibw_build: cp311-macosx_x86_64
            cibw_archs: x86_64
          - os: macos-13
            cibw_build: cp312-macosx_x86_64
            cibw_archs: x86_64
          - os: macos-13
            cibw_build: cp313-macosx_x86_64
            cibw_archs: x86_64
          
          # macOS ARM64 builds
          - os: macos-14
            cibw_build: cp311-macosx_arm64
            cibw_archs: arm64
          - os: macos-14
            cibw_build: cp312-macosx_arm64
            cibw_archs: arm64
          - os: macos-14
            cibw_build: cp313-macosx_arm64
            cibw_archs: arm64
          
          # Windows builds
          - os: windows-2022
            cibw_build: cp311-win_amd64
            cibw_archs: AMD64
          - os: windows-2022
            cibw_build: cp312-win_amd64
            cibw_archs: AMD64
          - os: windows-2022
            cibw_build: cp313-win_amd64
            cibw_archs: AMD64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up QEMU for ARM64
      if: runner.os == 'Linux' && contains(matrix.cibw_build, 'aarch64')
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.20.0
      env:
        CIBW_BUILD: ${{ matrix.cibw_build }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}
        CIBW_BUILD_VERBOSITY: 1
        
        # Linux-specific options
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        CIBW_BEFORE_BUILD_LINUX: |
          yum install -y libsndfile libsndfile-devel alsa-lib-devel
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
          pip install auditwheel-symbols && (auditwheel repair -w {dest_dir} {wheel} || auditwheel-symbols --manylinux 2014 {wheel})
        
        # macOS-specific options
        MACOSX_DEPLOYMENT_TARGET: 11.0
        CIBW_ENVIRONMENT_MACOS: ARCHS="${{ matrix.cibw_archs }}"
        
        # Test configuration (all platforms)
        CIBW_TEST_REQUIRES: -r test-requirements.txt
        CIBW_TEST_COMMAND: >
          cd {project}/tests && python -m pytest -v .
        CIBW_TEST_COMMAND_WINDOWS: >
          cd /D {project}\tests && python -m pytest -v .
        CIBW_TEST_SKIP: "*313*"

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.os }}-${{ matrix.cibw_build }}
        path: ./wheelhouse/*.whl

  # build_docs:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: 3.11

  #   - name: Install dependencies
  #     run: |
  #       sudo apt-get install libsndfile-dev
  #       python -m pip install --upgrade pip
  #       pip install pytest
  #       pip install furo

  #   - name: Build Docs
  #     run: |
  #       cd docs
  #       make html

  #   - name: Deploy Docs to GitHub Pages
  #     uses: peaceiris/actions-gh-pages@v4
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./docs/build/html

  upload-pypi:
    needs: build
    runs-on: ubuntu-latest
    name: "Upload wheels to PyPI"
    if: github.event_name == 'release' && github.event.action == 'published'
    # if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
